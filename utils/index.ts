/* eslint-disable no-console */
/* eslint-disable func-names */
/* eslint-disable no-param-reassign */
/* eslint-disable no-empty */
/* eslint-disable no-prototype-builtins */
/* eslint-disable no-restricted-syntax */
import { format } from 'date-fns';
import toast from 'react-hot-toast';
import _isNil from 'lodash/isNil';
import numeral from 'numeral';

let UUID_COUNT = 0;
export const getUniqueID = () => {
  UUID_COUNT += 1;
  return `UUID_${UUID_COUNT}`;
};

export const storeData = (key: any, value: any) => {
  try {
    localStorage.setItem(key, value);
  } catch (error) {
    console.log('storeData', error);
  }
};

export const getData = (key: any) => {
  let res: any = '';
  try {
    res = localStorage.getItem(key);
  } catch (error) {
    console.log('getData', error);
  }
  return res;
};

export const formatDate = (d: any) => {
  if (!d) {
    return '';
  }
  const date = new Date(d);

  return format(date, 'dd/MM/yyyy');
};

export const actionCreator = ({
  actionName,
  extraField = [],
}: {
  actionName: string;
  extraField?: any[];
}) => {
  const actionType = {
    NAME: actionName,
    PENDING: `${actionName}_PENDING`,
    SUCCESS: `${actionName}_SUCCESS`,
    ERROR: `${actionName}_ERROR`,
  } as any;
  extraField.forEach((field) => {
    actionType[field] = `${actionName}_${field}`;
  });

  return actionType;
};

export const actionTryCatchCreator = async ({
  service,
  onPending,
  onSuccess,
  onError,
  ignoreError,
}: any) => {
  const isIgnoreError = ignoreError || false;
  try {
    if (onPending) onPending();
    const { status, data } = await service;
    // if (status === 401) {
    //   storeData('_u', '');
    //   window.location.href = '/login';
    //   return;
    // }

    if (status === 200) {
      if (onSuccess) onSuccess(data);
    } else {
      throw String(`HTTP request with code ${status}`);
    }
  } catch (error) {
    if (onError) onError(error);
    if (isIgnoreError) {
      return;
    }
    if (typeof error === 'object') {
      const message = (error as any)?.message || 200;

      // const status = (error as any)?.response?.status || 200;
      // const isUnAuthen = status === 401;
      // if (isUnAuthen) {
      //   storeData('_u', '');
      // window.location.href = '/account/login';
      //   return;
      // }

      toast.error(`Error: ${message || ''}`);
      console.log('🚀 ~ file: index.ts ~ line 81 ~ error', error);
    } else {
      toast.error(`${error}`);
      console.log('🚀 ~ file: index.ts ~ line 81 ~ error', error);
    }
  }
};

export const openNewTab = (url: string) => {
  const tab = window.open(url, '_blank');
  if (tab != null) {
    tab.focus();
  }
};

export const autoGenerateDownloadLink = (fileName: string, url: string) => {
  const element = document.createElement('a');
  element.setAttribute('href', `${url}`);
  element.setAttribute('download', fileName);
  element.style.display = 'none';
  document.body.appendChild(element);
  element.click();
  document.body.removeChild(element);
};

export const NumberWithCommas = (x: any) =>
  x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');

// widthtOnSale[index].toFixed(1).replace(/\.0+$/,'')

export const formatFloatNumber = function (number: any, decimalNumber = 2) {
  const fixedNumber = Number.parseFloat(number).toFixed(decimalNumber);
  return String(fixedNumber).replace(/\B(?=(\d{3})+(?!\d))/g, ',');
};

export const truncates = (string: string, maxLength = 50) => {
  if (!string) return null;
  if (string.length <= maxLength) return string;
  return `${string.substring(0, maxLength)}...`;
};

export const formatVietnamDong = (price: number) =>
  // if (_isNil(price)) return 'N/A';
  // if (typeof price === 'string' && price.length === 0) return 'N/A';
  // if (price === '-') return '- đ';
  // const result = `${numeral(price).format('0,0')} đ`;

  new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(
    price,
  );

export const convertToSlug = (Text: string) =>
  Text.toLowerCase()
    .replace(/ /g, '-')
    .replace(/[^\w-]+/g, '');

const mangso = [
  'không',
  'một',
  'hai',
  'ba',
  'bốn',
  'năm',
  'sáu',
  'bảy',
  'tám',
  'chín',
];
function dochangchuc(so: any, daydu: any) {
  let chuoi = '';
  const chuc = Math.floor(so / 10);
  const donvi = so % 10;
  if (chuc > 1) {
    chuoi = ` ${mangso[chuc]} mươi`;
    if (donvi === 1) {
      chuoi += ' mốt';
    }
  } else if (chuc === 1) {
    chuoi = ' mười';
    if (donvi === 1) {
      chuoi += ' một';
    }
  } else if (daydu && donvi > 0) {
    chuoi = ' lẻ';
  }
  if (donvi === 5 && chuc > 1) {
    chuoi += ' lăm';
  } else if (donvi > 1 || (donvi === 1 && chuc === 0)) {
    chuoi += ` ${mangso[donvi]}`;
  }
  return chuoi;
}
function docblock(so: any, daydu: any) {
  let chuoi = '';
  const tram = Math.floor(so / 100);
  so %= 100;
  if (daydu || tram > 0) {
    chuoi = ` ${mangso[tram]} trăm`;
    chuoi += dochangchuc(so, true);
  } else {
    chuoi = dochangchuc(so, false);
  }
  return chuoi;
}
function dochangtrieu(so: any, daydu: any) {
  let chuoi = '';
  const trieu = Math.floor(so / 1000000);
  so %= 1000000;
  if (trieu > 0) {
    chuoi = `${docblock(trieu, daydu)} triệu`;
    daydu = true;
  }
  const nghin = Math.floor(so / 1000);
  so %= 1000;
  if (nghin > 0) {
    chuoi += `${docblock(nghin, daydu)} nghìn`;
    daydu = true;
  }
  if (so > 0) {
    chuoi += docblock(so, daydu);
  }
  return chuoi;
}
function capitalizeFirstLetter(string: string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
export const docso = (so: number) => {
  if (so === 0) return mangso[0];
  let chuoi = '';
  let hauto = '';
  do {
    const ty = so % 1000000000;
    so = Math.floor(so / 1000000000);
    if (so > 0) {
      chuoi = dochangtrieu(ty, true) + hauto + chuoi;
    } else {
      chuoi = dochangtrieu(ty, false) + hauto + chuoi;
    }
    hauto = ' tỷ';
  } while (so > 0);
  return `${capitalizeFirstLetter(chuoi.trim())} đồng`;
};

export const SerializeQueryToUrl = function (obj: any) {
  const str = [];
  for (const p in obj)
    if (obj.hasOwnProperty(p)) {
      if (obj[p] !== null) {
        if (obj[p] !== false) {
          if (
            (p === 'storeId' && obj[p] === -1) ||
            (p === 'asc' && obj[p] === true)
          ) {
          } else {
            const value = encodeURIComponent(obj[p]);
            // const value = obj[p];
            if (value.length > 0) {
              str.push(`${encodeURIComponent(p)}=${value}`);
            }
          }
        }
      }
    }
  return str.join('&');
};

export const formatCash = (n: number) => {
  if (n < 1e3) return n;
  if (n >= 1e3) return `${+(n / 1e3).toFixed(2)}K`;
};
